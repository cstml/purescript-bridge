-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Crypto where

import Prelude

import ConstrIndices (class HasConstrIndices, constrIndices, fromConstr2Index)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple(..))
import Plutus.V1.Ledger.Bytes (LedgerBytes)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)

newtype PubKey = PubKey { getPubKey :: LedgerBytes }

derive instance Generic PubKey _

derive instance Newtype PubKey _

instance HasConstrIndices PubKey where
  constrIndices _ = fromConstr2Index [Tuple "PubKey" 0]

--------------------------------------------------------------------------------

_PubKey :: Iso' PubKey {getPubKey :: LedgerBytes}
_PubKey = _Newtype

--------------------------------------------------------------------------------

newtype PubKeyHash = PubKeyHash { getPubKeyHash :: ByteArray }

derive instance Generic PubKeyHash _

derive instance Newtype PubKeyHash _

instance HasConstrIndices PubKeyHash where
  constrIndices _ = fromConstr2Index [Tuple "PubKeyHash" 0]

--------------------------------------------------------------------------------

_PubKeyHash :: Iso' PubKeyHash {getPubKeyHash :: ByteArray}
_PubKeyHash = _Newtype

--------------------------------------------------------------------------------

newtype PrivateKey = PrivateKey { getPrivateKey :: LedgerBytes }

derive instance Generic PrivateKey _

derive instance Newtype PrivateKey _

instance HasConstrIndices PrivateKey where
  constrIndices _ = fromConstr2Index [Tuple "PrivateKey" 0]

--------------------------------------------------------------------------------

_PrivateKey :: Iso' PrivateKey {getPrivateKey :: LedgerBytes}
_PrivateKey = _Newtype

--------------------------------------------------------------------------------

newtype Signature = Signature { getSignature :: ByteArray }

derive instance Generic Signature _

derive instance Newtype Signature _

instance HasConstrIndices Signature where
  constrIndices _ = fromConstr2Index [Tuple "Signature" 0]

--------------------------------------------------------------------------------

_Signature :: Iso' Signature {getSignature :: ByteArray}
_Signature = _Newtype
