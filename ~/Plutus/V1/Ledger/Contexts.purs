-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Contexts where

import Prelude

import ConstrIndices (class HasConstrIndices, constrIndices, fromConstr2Index)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple(..))
import Plutus.V1.Ledger.Credential (StakingCredential)
import Plutus.V1.Ledger.Crypto (PubKeyHash)
import Plutus.V1.Ledger.DCert (DCert)
import Plutus.V1.Ledger.Interval (Interval)
import Plutus.V1.Ledger.Scripts (Datum, DatumHash)
import Plutus.V1.Ledger.Tx (TxOut, TxOutRef)
import Plutus.V1.Ledger.TxId (TxId)
import Type.Proxy (Proxy(Proxy))
import Types.Interval (POSIXTime)
import Types.Value (CurrencySymbol, Value)

newtype TxInfo = TxInfo
  { txInfoInputs :: Array TxInInfo
  , txInfoOutputs :: Array TxOut
  , txInfoFee :: Value
  , txInfoMint :: Value
  , txInfoDCert :: Array DCert
  , txInfoWdrl :: Array (Tuple StakingCredential BigInt)
  , txInfoValidRange :: Interval POSIXTime
  , txInfoSignatories :: Array PubKeyHash
  , txInfoData :: Array (Tuple DatumHash Datum)
  , txInfoId :: TxId
  }

derive instance Generic TxInfo _

derive instance Newtype TxInfo _

instance HasConstrIndices TxInfo where
  constrIndices _ = fromConstr2Index [Tuple "TxInfo" 0]

--------------------------------------------------------------------------------

_TxInfo :: Iso' TxInfo {txInfoInputs :: Array TxInInfo, txInfoOutputs :: Array TxOut, txInfoFee :: Value, txInfoMint :: Value, txInfoDCert :: Array DCert, txInfoWdrl :: Array (Tuple StakingCredential BigInt), txInfoValidRange :: Interval POSIXTime, txInfoSignatories :: Array PubKeyHash, txInfoData :: Array (Tuple DatumHash Datum), txInfoId :: TxId}
_TxInfo = _Newtype

--------------------------------------------------------------------------------

newtype TxInInfo = TxInInfo
  { txInInfoOutRef :: TxOutRef
  , txInInfoResolved :: TxOut
  }

derive instance Generic TxInInfo _

derive instance Newtype TxInInfo _

instance HasConstrIndices TxInInfo where
  constrIndices _ = fromConstr2Index [Tuple "TxInInfo" 0]

--------------------------------------------------------------------------------

_TxInInfo :: Iso' TxInInfo {txInInfoOutRef :: TxOutRef, txInInfoResolved :: TxOut}
_TxInInfo = _Newtype

--------------------------------------------------------------------------------

newtype ScriptContext = ScriptContext
  { scriptContextTxInfo :: TxInfo
  , scriptContextPurpose :: ScriptPurpose
  }

derive instance Generic ScriptContext _

derive instance Newtype ScriptContext _

instance HasConstrIndices ScriptContext where
  constrIndices _ = fromConstr2Index [Tuple "ScriptContext" 0]

--------------------------------------------------------------------------------

_ScriptContext :: Iso' ScriptContext {scriptContextTxInfo :: TxInfo, scriptContextPurpose :: ScriptPurpose}
_ScriptContext = _Newtype

--------------------------------------------------------------------------------

data ScriptPurpose
  = Minting CurrencySymbol
  | Spending TxOutRef
  | Rewarding StakingCredential
  | Certifying DCert

derive instance Generic ScriptPurpose _

instance HasConstrIndices ScriptPurpose where
  constrIndices _ = fromConstr2Index [Tuple "Minting" 0,Tuple "Spending" 1,Tuple "Rewarding" 2,Tuple "Certifying" 3]

--------------------------------------------------------------------------------

_Minting :: Prism' ScriptPurpose CurrencySymbol
_Minting = prism' Minting case _ of
  (Minting a) -> Just a
  _ -> Nothing

_Spending :: Prism' ScriptPurpose TxOutRef
_Spending = prism' Spending case _ of
  (Spending a) -> Just a
  _ -> Nothing

_Rewarding :: Prism' ScriptPurpose StakingCredential
_Rewarding = prism' Rewarding case _ of
  (Rewarding a) -> Just a
  _ -> Nothing

_Certifying :: Prism' ScriptPurpose DCert
_Certifying = prism' Certifying case _ of
  (Certifying a) -> Just a
  _ -> Nothing
